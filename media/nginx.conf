worker_processes  auto;

events {
    worker_connections  32;
}

http {

    default_type  application/octet-stream;
    log_format detailed 'Remote: $remote_addr - $remote_user [$time_local] '
                        'Request: "$request" Status: $status body_bytes_sent: $body_bytes_sent '
                        'http_referer: "$http_referer" http_user_agent: "$http_user_agent" '
                        'Proxy: "$proxy_host" -> "$upstream_addr" '
                        'ReqTime: $request_time RespTime: $upstream_response_time '
                        'Headers: "$http_authorization" "$content_type"'
                        # 'Cache: $upstream_cache_status Key: $proxy_cache_key';
    access_log ./logs/_access.log detailed;
    
    proxy_cache_path ./cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;

    server {
        listen 5003;
        server_name localhost;  # 建议为 MinIO 分配独立域名或子域名
        # server_name minio.guliguli.space;  # 建议为 MinIO 分配独立域名或子域名

        # location ~ \.m3u8$ {
        #     proxy_pass http://minio:9000;  # 指向MinIO服务器
        #     proxy_http_version 1.1;

        #     # 禁用所有可能修改内容的操作
        #     proxy_buffering off;
        #     proxy_request_buffering off;
        #     proxy_cache off;
        #     chunked_transfer_encoding on;

        #     # 确保正确的Content-Type
        #     proxy_set_header Accept '';
        #     proxy_hide_header Content-Type;
        #     add_header Content-Type 'application/vnd.apple.mpegurl';

        #     # 支持范围请求
        #     proxy_set_header Range $http_range;
        #     proxy_set_header If-Range $http_if_range;
        #     proxy_no_cache 1;
        # }

        # add_header 'Access-Control-Allow-Origin' '*';
        # add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, HEAD';
        # add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
        location /temp {
            proxy_pass http://localhost:9000;

            proxy_cache off;
            # proxy_cache my_cache;
            # proxy_cache_key "$scheme$host$uri";  # 忽略查询参数（如 ?X-Amz-Signature），因为我们只有一个用户所以没问题
            # proxy_ignore_headers "Cache-Control" "Set-Cookie";   # 忽略可能干扰的头部
            # proxy_cache_valid 200 302 1h;            # 缓存1小时
            
            proxy_buffering off;
            # proxy_cache_methods GET;
            
            chunked_transfer_encoding on;
            
            proxy_set_header Host $host:$server_port;
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;

            proxy_cache_convert_head off;
            proxy_pass_request_headers on;
            # proxy_pass_request_uri on;
            proxy_redirect off;
            proxy_request_buffering off;
            client_max_body_size 10m;
        }

        location / {
            proxy_pass http://localhost:9000/;

            # proxy_cache off;
            proxy_cache my_cache;
            proxy_cache_key "$scheme$host$uri";  # 忽略查询参数（如 ?X-Amz-Signature），因为我们只有一个用户所以没问题
            proxy_ignore_headers "Cache-Control" "Set-Cookie";   # 忽略可能干扰的头部
            proxy_cache_valid 200 302 1h;            # 缓存1小时
            
            proxy_buffering on;
            proxy_cache_methods GET;
            
            chunked_transfer_encoding on;
            
            proxy_set_header Host $host:$server_port;
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;

            proxy_cache_convert_head off;
            proxy_pass_request_headers on;
            # proxy_pass_request_uri on;
            proxy_redirect off;
            proxy_request_buffering off;
            client_max_body_size 10m;
        }
    }
    # server {
    #     listen 5004;
    #     server_name localhost;  # 建议为 MinIO 分配独立域名或子域名
    #     # server_name minio-console.guliguli.space;  # 建议为 MinIO 分配独立域名或子域名

    #     location / {
    #         proxy_pass http://minio:9001;

    #         proxy_set_header Host $host:$server_port;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header X-Forwarded-Host $host:$server_port;
    #         # 重要：处理WebSocket连接
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
            
    #         # 设置超时时间（可选）
    #         proxy_connect_timeout 300;
    #         proxy_send_timeout 300;
    #         proxy_read_timeout 300;
    #         send_timeout 300;

    #         chunked_transfer_encoding on;
    #         proxy_force_ranges on;

    #         proxy_cache off;
    #         proxy_no_cache 1;
    #         expires off;
    #     }
    # }

    server {
        listen 5000;
        server_name localhost;  # Flask 的域名

        location / {
            proxy_pass http://localhost:4850;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ip {
            return 200 "$remote_addr\n";
        }
    }
}